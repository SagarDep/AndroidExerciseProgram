private final PublishSubject<Boolean> mDoneSubject = PublishSubject.create();

 private void rxjavaEssentialsTest() {
        Observable<Integer> observable = Observable.create(new Observable.OnSubscribe<Integer>() {
            @Override
            public void call(Subscriber<? super Integer> subscriber) {
                for (int i = 0; i < 5; i++) {
                    subscriber.onNext(i);
                }
                subscriber.onCompleted();
            }
        });

        final Subscription subscription = observable.subscribe(new Subscriber<Integer>() {
            @Override
            public void onCompleted() {
                KLog.e("onCompleted");
            }

            @Override
            public void onError(Throwable e) {
                KLog.e(e.getMessage());
            }

            @Override
            public void onNext(Integer integer) {
                KLog.e("收到：" + integer);
            }
        });

        StringBuilder sb = new StringBuilder();
        Observable.from(Arrays.asList("I", " am", " hehe", " chinese!"))
                .filter(s -> !s.equals(" hehe"))
                .subscribe(new Subscriber<String>() {
                    @Override
                    public void onCompleted() {
                        KLog.e(sb.toString());
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onNext(String s) {
                        sb.append(s);
                    }
                });

        Observable.just("I'm a patriot!").subscribe(s -> KLog.e(s));

        // Subject = Observable + Observer
        // subject是一个神奇的对象，它可以是一个Observable同时也可以是一个Observer：
        // 它作为连接这两个世界的一座桥梁。一个Subject可以订阅一个Observable，就像一个观察者，
        // 并且它可以发射新的数据，或者传递它接受到的数据，就像一个Observable。
        // 很明显，作为一个Observable，观察者们或者其它Subject都可以订阅它。
        PublishSubject<String> stringPublishSubject = PublishSubject.create();
        // 创建了一个PublishSubject，用create()方法发射一个String值，然后我们订阅了PublishSubject。
        // 此时，没有数据要发送，因此我们的观察者只能等待，没有阻塞线程，也没有消耗资源。
        // 就在这随时准备从subject接收值，如果subject没有发射值那么我们的观察者就会一直在等待。
        stringPublishSubject.subscribe(s -> KLog.e(s));
        // 手动发射字符串“Hello World”,它触发了观察者的onNext()方法
        stringPublishSubject.onNext("China is one.");

        // 有一个private声明的Observable，外部不能访问。Observable在它生命周期内发射值，我们不用关心这些值，我们只关心他们的结束
        // 创建一个新的PublishSubject来响应它的onNext()方法，并且外部也可以访问它
        mDoneSubject.subscribe(s -> KLog.e("PublishSubject done: " + s));
        // 创建“私有”的Observable，只有subject才可以访问的到
        Observable
                .create(new Observable.OnSubscribe<Integer>() {
                    @Override
                    public void call(Subscriber<? super Integer> subscriber) {
                        for (int i = 0; i < 5; i++) {
                            subscriber.onNext(i);
                        }
                        subscriber.onCompleted();
                    }
                })
                .doOnCompleted(() -> mDoneSubject.onNext(true))
                .subscribe();
        // doOnCompleted()方法指定当Observable结束时要做什么事情：在subject上发射true。最后，我们订阅了Observable。
        // 很明显，空的subscribe()调用仅仅是为了开启Observable，而不用管已发出的任何值，也不用管完成事件或者错误事件。
        // 创建了一个可以连接Observables并且同时可被观测的实体。当我们想为公共资源创建独立、抽象或更易观测的点时，这是极其有用的

        // BehaviorSubject
        // 简单的说，BehaviorSubject会首先向他的订阅者发送截至订阅前最新的一个数据对象（或初始值）,然后正常发送订阅后的数据流。
        BehaviorSubject<Integer> behaviorSubject = BehaviorSubject.create(1);
        // 在这个短例子中，我们创建了一个能发射整形(Integer)的BehaviorSubject。由于每当Observes订阅它时就会发射最新的数据，所以它需要一个初始值。
        // 无论是否调用behaviorSubject.onNext(),都会输出默认值
        behaviorSubject.subscribe(i -> KLog.e("BehaviorSubject输出：" + i));
        behaviorSubject.onNext(111);

        //ReplaySubject
        // ReplaySubject会缓存它所订阅的所有数据,向任意一个订阅它的观察者重发:
        ReplaySubject<Integer> replaySubject = ReplaySubject.create();
        replaySubject.subscribe(i -> KLog.e("ReplaySubject输出：" + i));
        replaySubject.onNext(110);
        replaySubject.onNext(111);
        replaySubject.onNext(112);

        // AsyncSubject
        // 当Observable完成时AsyncSubject只会发布最后一个数据给已经订阅的每一个观察者。
        AsyncSubject<Integer> asyncSubject = AsyncSubject.create();
        asyncSubject.subscribe(i -> KLog.e("AsyncSubject输出：" + i));
        Observable
                .create(new Observable.OnSubscribe<Integer>() {
                    @Override
                    public void call(Subscriber<? super Integer> subscriber) {
                        for (int i = 0; i < 5; i++) {
                            // AsyncSubject只会输出最后的4
                            subscriber.onNext(i);
                        }
                        subscriber.onCompleted();
                    }
                })
                .subscribe(asyncSubject);

    }

    /*************************
     * 深入浅出RxJava（1）：基础篇
     *****************************************/
    private void test1() {
        // 这里定义的Observable对象仅仅发出一个Hello World字符串，然后就结束了。
        // 接着我们创建一个Subscriber来处理Observable对象发出的字符串。
        /*Observable<String> myObservable = Observable.create(
                new Observable.OnSubscribe<String>() {
                    @Override
                    public void call(Subscriber<? super String> subscriber) {
                        subscriber.onNext("Hello, world!");
                        subscriber.onCompleted();
                    }
                }
        );*/
        // lambda简化
        Observable<String> myObservable = Observable.create(
                subscriber -> {
                    subscriber.onNext("Hello, world!");
                    subscriber.onCompleted();
                }
        );
        // 这里subscriber仅仅就是打印observable发出的字符串。通过subscribe函数就可以将我们定义的
        // myObservable对象和mySubscriber对象关联起来，这样就完成了subscriber对observable的订阅。
        Subscriber<String> mySubscriber = new Subscriber<String>() {
            @Override
            public void onCompleted() {
                KLog.e("完成");
            }

            @Override
            public void onError(Throwable e) {
                KLog.e("发生错误");
            }

            @Override
            public void onNext(String s) {
                KLog.e("输出" + s);
            }
        };

        // 一旦mySubscriber订阅了myObservable，myObservable就是调用
        // mySubscriber对象的onNext和onComplete方法，mySubscriber就会打印出Hello World！
        myObservable.subscribe(mySubscriber);
    }

    private void test2() {
        /*// RxJava内置了很多简化创建Observable对象的函数，比如Observable.just
        // 就是用来创建只发出一个事件就结束的Observable对象，上面创建Observable对象
        // 的代码可以简化为一行
        Observable<String> myObservable = Observable.just("Hello China!");
        // 其实并不关心OnComplete和OnError，我们只需要在onNext的时候做一些处理，这时候就可以使用Action1类。
        Action1<String> onNextAction = new Action1<String>() {
            @Override
            public void call(String s) {
                KLog.e("输出" + s);
            }
        };
        // subscribe方法有一个重载版本，接受三个Action1类型的参数，分别对应OnNext，OnComplete， OnError函数。
        // 并不关心onError和onComplete，所以只需要第一个参数就可以
        myObservable.subscribe(onNextAction);*/

        // 最终简化成
        Observable.just("Hello China!").subscribe(new Action1<String>() {
            @Override
            public void call(String s) {
                KLog.e("输出" + s);
            }
        });

        // 使用Lambda
        Observable.just("Hello China!").subscribe(s -> KLog.e(s));

    }

    private void test3() {
        /*操作符就是为了解决对Observable对象的变换的问题，操作符用于
        在Observable和最终的Subscriber之间修改Observable发出的事件。
        RxJava提供了很多很有用的操作符。
        比如map操作符，就是用来把把一个事件转换为另一个事件的。*/
        /*Observable.just("Hello people!")
                .map(new Func1<String, String>() {
                    @Override
                    public String call(String s) {
                        return s + "-From Ou";
                    }
                })
                .subscribe(s -> KLog.e(s));*/

        // 使用lambda可以简化为
        Observable.just("Hello people!")
                // map把一个事件转换为另一个事件
                .map(s -> s + "-From Ou")
                .subscribe(s -> KLog.e(s));
        // map操作符返回一个Observable对象，这样就可以实现链式调用，
        // 在一个Observable对象上多次使用map操作符，最终将最简洁的
        // 数据传递给Subscriber对象。
    }

    private void test4() {
        /*map操作符更有趣的一点是它不必返回Observable对象返回的类型，
        你可以使用map操作符返回一个发出新的数据类型的observable对象。
        比如上面的例子中，subscriber并不关心返回的字符串，而是想要字符串的hash值*/
        Observable.just("Hello google!")
                // 第一个值是传入的类型，第二个是希望返回的类型
                .map(new Func1<String, Integer>() {
                    @Override
                    public Integer call(String s) {
                        return s.hashCode();
                    }
                })
                .subscribe(integer -> KLog.e(integer));

        // lambda简化
        Observable.just("Hello google!")
                .map(s -> s.hashCode())
                .subscribe(i -> KLog.e(Integer.toString(i)));

        // Subscriber做的事情越少越好，我们再增加一个map操作符
        Observable.just("Hello google!")
                .map(s -> s.hashCode())
                .map(i -> Integer.toString(i))
                .subscribe(s -> KLog.e(s));
    }

    /*不服？

    是不是觉得我们的例子太简单，不足以说服你？你需要明白下面的两点:
    1.Observable和Subscriber可以做任何事情
      Observable可以是一个数据库查询，Subscriber用来显示查询结果；Observable可以是屏幕上的点击事件，
      Subscriber用来响应点击事件；Observable可以是一个网络请求，Subscriber用来显示请求结果。
    2.Observable和Subscriber是独立于中间的变换过程的。
      在Observable和Subscriber中间可以增减任何数量的map。整个系统是高度可组合的，操作数据是一个很简单的过程。*/

    /*************************
     * 深入浅出RxJava（2）：操作符
     *****************************************/
    private void test5() {

        // 1.下面的代码使我们丧失了变化数据流的能力。一旦我们想要更改每一个URL，
        // 只能在Subscriber中来做。我们竟然没有使用如此酷的map()操作符！！！
        query("").subscribe(urls -> {
            for (String url : urls) {
                KLog.e(url);
            }
        });

        // Observable.from()方法，它接收一个集合作为输入，然后每次输出一个元素给subscriber
        /*ArrayList<String> list = new ArrayList<>(Arrays.asList("url1", "url2", "url3"));
        Observable.from(list)
                .subscribe(url -> KLog.e(url));*/

        // 2.使用Observable.from()
        // Observable.from接收urls作为输入，再每次输出一个元素到Subscriber
        // 多个嵌套的subscription不仅看起来很丑，难以修改
        query("").subscribe(urls -> Observable.from(urls).map(url -> "使用Observable.from方法：" + url).subscribe(url -> KLog.e(url)));

        //  3.Observable.flatMap()接收一个Observable的输出作为输入，同时输出另外一个Observable
        //  Func1第一个参数是query("")的输出作为输入，第二个是将处理后的值输出到另外一个Observable
        /*query("").flatMap(new Func1<List<String>, Observable<?>>() {
            @Override
            public Observable<?> call(List<String> urls) {
                // Observable.from接收urls作为输入，再每次输出一个元素到Subscriber
                return Observable.from(urls);
            }
        }).subscribe(url -> KLog.e(url));*/
        // lambda简化
        query("").flatMap(urls -> Observable.from(urls)).map(url -> "使用flatMap方法：" + url).subscribe(url -> KLog.e(url));

        /*flatMap()是不是看起来很奇怪？为什么它要返回另外一个Observable呢？理解flatMap的关键点在于，
        flatMap输出的新的Observable正是我们在Subscriber想要接收的。现在Subscriber不再收到List<String>，
        而是收到一些列单个的字符串，就像Observable.from()的输出一样。*/
    }

    // 根据输入的字符串返回一个网站的url列表
    private Observable<List<String>> query(String text) {
        return Observable.create(subscribe -> {
            // Observable将查找到的url列表传给Subscriber
            subscribe.onNext(new ArrayList<>(Arrays.asList("url1", "url2", "url3")));
            subscribe.onCompleted();
        });
    }

    // 返回网站的标题，如果404了就返回null  
    private Observable<String> getTitle(String url) {
        return Observable.create(subscriber -> {
            if ("url3".equals(url)) {
                subscriber.onNext(null);
            } else {
                subscriber.onNext("此乃标题");
            }
            subscriber.onCompleted();
        });
    }

    private void test6() {

        /*query("")
                .flatMap(urls -> Observable.from(urls))
                .flatMap(new Func1<String, Observable<String>>() {
                    @Override
                    public Observable<String> call(String url) {
                        return getTitle(url);
                    }
                })
                .subscribe(title -> System.out.println(title));*/

        // 打印收到的每个网站的标题
        query("")
                .flatMap(urls -> Observable.from(urls))
                        // 将输入的url用来查找标题输出
                .flatMap(url -> getTitle(url))
                .map(title -> "搜索到的网页的标题是: " + title)
                .subscribe(title -> KLog.e(title));
        // 将两个API的调用组合到一个链式调用中了
        // 大家应该都应该知道同步所有的API调用，然后将所有API调用的回调结果组合成需要展示的数据是一件多么蛋疼的事情。
        // 这里我们成功的避免了callback hell（多层嵌套的回调，导致代码难以阅读维护）。现在所有的逻辑都包装成了这种简单的响应式调用。
    }

    private void test7() {
        // getTitle()返回null如果url不存在。我们不想输出”null”，
        // 那么我们可以从返回的title列表中过滤掉null值！
        query("")
                // 先将搜索到的url集合一个一个输出
                .flatMap(urls -> Observable.from(urls))
                        // 将输入的url用来查找标题输出
                .flatMap(url -> getTitle(url))
                        // 过滤null值
                .filter(url -> url != null)
                        // 只想要最多1个结果
                .take(1)
                        // 想在打印之前，把每个标题保存到磁盘
                        // doOnNext()允许我们在每次输出一个元素之前做一些额外的事情
                .doOnNext(title -> saveTitle(title))
                .map(title -> "搜索到的网页的标题是: " + title)
                .subscribe(title -> KLog.e(title));
        // filter()输出和输入相同的元素，并且会过滤掉那些不满足检查条件的。
    }

    private void saveTitle(String title) {
        KLog.e("将 " + title + " 保存到磁盘中");
    }

    /*RxJava包含了大量的操作符。操作符的数量是有点吓人，但是很值得你去挨个看一下，这样你可以知道有哪些操作符可以使用。
    弄懂这些操作符可能会花一些时间，但是一旦弄懂了，你就完全掌握了RxJava的威力。

    你甚至可以编写自定义的操作符！这篇blog不打算将自定义操作符，如果你想的话，清自行Google吧。*/

    /*感觉如何？

    好吧，你是一个怀疑主义者，并且还很难被说服，那为什么你要关心这些操作符呢？

    因为操作符可以让你对数据流做任何操作。

    将一系列的操作符链接起来就可以完成复杂的逻辑。代码被分解成一系列可以组合的片段。这就是响应式函数编程的魅力。
    用的越多，就会越多的改变你的编程思维。

    另外，RxJava也使我们处理数据的方式变得更简单。在最后一个例子里，我们调用了两个API，对API返回的数据进行了处理，
    然后保存到磁盘。但是我们的Subscriber并不知道这些，它只是认为自己在接收一个Observable<String>对象。良好的封装性也带来了编码的便利！

    在第三部分中，我将介绍RxJava的另外一些很酷的特性，比如错误处理和并发，这些特性并不会直接用来处理数据。*/

    /*************************
     * 深入浅出RxJava（3）：响应式的好处
     *****************************************/

    /*错误处理

    到目前为止，我们都没怎么介绍onComplete()和onError()函数。这两个函数用来通知订阅者，
    被观察的对象将停止发送数据以及为什么停止（成功的完成或者出错了）。*/
    private void test8() {
        Observable.just("Test error!!!")
                .map(s -> handleException(s))
                .map(s -> handleAnotherException(s))
                .subscribe(new Subscriber<String>() {
                    @Override
                    public void onCompleted() {
                        KLog.e("完成");
                    }

                    @Override
                    public void onError(Throwable e) {
                        KLog.e(e.getMessage());
                    }

                    @Override
                    public void onNext(String s) {
                        KLog.e(s);
                    }
                });
    }

    private String handleAnotherException(String s) {
        if (s.contains("!!!")) {
            throw new RuntimeException("字符串发现!!!,发生异常");
        }
        return s;
    }

    private String handleException(String s) {
        if (s.contains("???")) {
            throw new RuntimeException("字符串发现???,发生异常");
        }
        return s;
    }

   /*这种模式有以下几个优点：
    1.只要有异常发生onError()一定会被调用，这极大的简化了错误处理。只需要在一个地方处理错误即可以。
    2.操作符不需要处理异常，将异常处理交给订阅者来做，Observerable的操作符调用链中一旦有一个抛出了异常，就会直接执行onError()方法。
    3.你能够知道什么时候订阅者已经接收了全部的数据。知道什么时候任务结束能够帮助简化代码的流程。（虽然有可能Observable对象永远不会结束）
      我觉得这种错误处理方式比传统的错误处理更简单。传统的错误处理中，通常是在每个回调中处理错误。这不仅导致了重复的代码，
      并且意味着每个回调都必须知道如何处理错误，你的回调代码将和调用者紧耦合在一起。

    使用RxJava，Observable对象根本不需要知道如何处理错误！操作符也不需要处理错误状态-一旦发生错误，就会跳过
    当前和后续的操作符。所有的错误处理都交给订阅者来做。*/

    /*调度器
    编写多线程的Android应用程序是很难的，因为你必须确保代码在正确的线程中运行，否则的话可能会导致app崩溃。最常见的就是在非主线程更新UI。
    使用RxJava，你可以使用subscribeOn()指定观察者代码运行的线程，使用observerOn()指定订阅者运行的线程：*/

    private void test9() {
        /*myObservableServices.retrieveImage(url)
                .subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
                .observeOn(AndroidSchedulers.mainThread()) // 指定 Subscriber 的回调发生在主线程
                .subscribe(bitmap -> myImageView.setImageBitmap(bitmap));*/
        testThread("测试")
                .subscribeOn(Schedulers.io()) // 指定 subscribe() 发生在 IO 线程
                .observeOn(AndroidSchedulers.mainThread()) // 指定 Subscriber 的回调发生在主线程
                .subscribe(s -> {
                    KLog.e(s);
                    // 这个是在主线程执行，为true
                    KLog.e(Thread.currentThread() == getMainLooper().getThread());
                });
    }

    // 根据输入的字符串返回一个网站的url列表
    private Observable<String> testThread(String text) {
        return Observable.create(subscribe -> {
            // 这个是在IO线程执行，为false
            KLog.e(Thread.currentThread() == getMainLooper().getThread());
            subscribe.onNext(text);
            subscribe.onCompleted();
        });
    }

    /*是不是很简单？任何在我的Subscriber前面执行的代码都是在I/O线程中运行。最后，操作view的代码在主线程中运行.

     最棒的是我可以把subscribeOn()和observerOn()添加到任何Observable对象上。这两个也是操作符！。
     我不需要关心Observable对象以及它上面有哪些操作符。仅仅运用这两个操作符就可以实现在不同的线程中调度。

     如果使用AsyncTask或者其他类似的，我将不得不仔细设计我的代码，找出需要并发执行的部分。使用RxJava，
     我可以保持代码不变，仅仅在需要并发的时候调用这两个操作符就可以。*/

    /*订阅（Subscriptions）

      当调用Observable.subscribe()，会返回一个Subscription对象。这个对象代表了被观察者和订阅者之间的联系。*/
    private void test10() {
        final Subscription subscription = Observable.just("tets").subscribe(s -> KLog.e(s));
        // 使用这个Subscription对象来操作被观察者和订阅者之间的联系.
        subscription.unsubscribe();
        KLog.e("subscription.isUnsubscribed()=" + subscription.isUnsubscribed());
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // TODO: add setContentView(...) invocation
        ButterKnife.bind(this);
    }
    /*RxJava的另外一个好处就是它处理unsubscribing的时候，会停止整个调用链。如果你使用了一串很复杂的操作符，
    调用unsubscribe将会在他当前执行的地方终止。不需要做任何额外的工作！*/

    /*总结

    记住这个系列仅仅是对RxJava的一个入门介绍。RxJava中有更多的我没介绍的功能等你探索（比如backpressure）。
    当然我也不是所有的代码都使用响应式的方式–仅仅当代码复杂到我想将它分解成简单的逻辑的时候，我才使用响应式代码。

    最初，我的计划是这篇文章作为这个系列的总结，但是我收到许多请求我介绍在Android中使用RxJava，
    所以你可以继续阅读第四篇了。我希望这个介绍能让你开始使用RxJava。如果你想学到更多，我建议你阅读RxJava的官方wiki。*/


    /**********************
     * 深入浅出RxJava四-在Android中使用响应式编程
     *******************************/

    /*RxAndroid

    RxAndroid是RxJava的一个针对Android平台的扩展。它包含了一些能够简化Android开发的工具。

    首先，AndroidSchedulers提供了针对Android的线程系统的调度器。需要在UI线程中运行某些代码？很简单，只需要使用AndroidSchedulers.mainThread():

    retrofitService.getImage(url)
    .subscribeOn(Schedulers.io())
    .observeOn(AndroidSchedulers.mainThread())
    .subscribe(bitmap -> myImageView.setImageBitmap(bitmap));

    如果你已经创建了自己的Handler，你可以使用HandlerThreadScheduler1将一个调度器链接到你的handler上。*/

    /*接着要介绍的就是AndroidObservable，它提供了跟多的功能来配合Android的生命周期。bindActivity()和bindFragment()方法
    默认使用AndroidSchedulers.mainThread()来执行观察者代码，这两个方法会在Activity或者Fragment结束的时候通知被观察者停止发出新的消息。

    AndroidObservable.bindActivity(this, retrofitService.getImage(url))
            .subscribeOn(Schedulers.io())
            .subscribe(bitmap -> myImageView.setImageBitmap(bitmap);*/

    /*我自己也很喜欢AndroidObservable.fromBroadcast()方法，它允许你创建一个类似BroadcastReceiver的Observable对象。下面的例子展示了如何在网络变化的时候被通知到：

    IntentFilter filter = new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION);
    AndroidObservable.fromBroadcast(context, filter)
            .subscribe(intent -> handleConnectivityChange(intent));*/

    /*最后要介绍的是ViewObservable,使用它可以给View添加了一些绑定。如果你想在每次点击view的时候都收到一个事件，
            可以使用ViewObservable.clicks()，或者你想监听TextView的内容变化，可以使用ViewObservable.text()。

            ViewObservable.clicks(mCardNameEditText, false)
            .subscribe(view -> handleClick(view));*/

    /*Retrofit

    大名鼎鼎的Retrofit库内置了对RxJava的支持。通常调用发可以通过使用一个Callback对象来获取异步的结果：

    @GET("/user/{id}/photo")
    void getUserPhoto(@Path("id") int id, Callback<Photo> cb);

    使用RxJava，你可以直接返回一个Observable对象。

    @GET("/user/{id}/photo")
    Observable<Photo> getUserPhoto(@Path("id") int id);

    现在你可以随意使用Observable对象了。你不仅可以获取数据，还可以进行变换。
    Retrofit对Observable的支持使得它可以很简单的将多个REST请求结合起来。比如我们有一个请求是获取照片的，还有一个请求是获取元数据的，我们就可以将这两个请求并发的发出，并且等待两个结果都返回之后再做处理：

            Observable.zip(
            service.getUserPhoto(id),
            service.getPhotoMetadata(id),
            (photo, metadata) -> createPhotoWithData(photo, metadata))
            .subscribe(photoWithData -> showPhoto(photoWithData));

    在第二篇里我展示过一个类似的例子（使用flatMap()）。这里我只是想展示以下使用RxJava+Retrofit可以多么简单地组合多个REST请求。

    遗留代码，运行极慢的代码

    Retrofit可以返回Observable对象，但是如果你使用的别的库并不支持这样怎么办？或者说一个内部的内码，你想把他们转换成Observable的？有什么简单的办法没？

            绝大多数时候Observable.just() 和 Observable.from() 能够帮助你从遗留代码中创建 Observable 对象:

    private Object oldMethod() { ... }

    public Observable<Object> newMethod() {
        return Observable.just(oldMethod());
    }

    上面的例子中如果oldMethod()足够快是没有什么问题的，但是如果很慢呢？调用oldMethod()将会阻塞住他所在的线程。
    为了解决这个问题，可以参考我一直使用的方法–使用defer()来包装缓慢的代码：

    private Object slowBlockingMethod() { ... }

    public Observable<Object> newMethod() {
        return Observable.defer(() -> Observable.just(slowBlockingMethod()));
    }

    现在，newMethod()的调用不会阻塞了，除非你订阅返回的observable对象。

    生命周期

    我把最难的不分留在了最后。如何处理Activity的生命周期？主要就是两个问题：
            1.在configuration改变（比如转屏）之后继续之前的Subscription。

    比如你使用Retrofit发出了一个REST请求，接着想在listview中展示结果。如果在网络请求的时候用户旋转了屏幕怎么办？你当然想继续刚才的请求，但是怎么搞？

            2.Observable持有Context导致的内存泄露

    这个问题是因为创建subscription的时候，以某种方式持有了context的引用，尤其是当你和view交互的时候，这太容易发生！如果Observable没有及时结束，内存占用就会越来越大。
    不幸的是，没有银弹来解决这两个问题，但是这里有一些指导方案你可以参考。

    第一个问题的解决方案就是使用RxJava内置的缓存机制，这样你就可以对同一个Observable对象执行unsubscribe/resubscribe，却不用重复运行得到Observable的代码。cache() (或者 replay())会继续执行网络请求（甚至你调用了unsubscribe也不会停止）。这就是说你可以在Activity重新创建的时候从cache()的返回值中创建一个新的Observable对象。

    Observable<Photo> request = service.getUserPhoto(id).cache();
    Subscription sub = request.subscribe(photo -> handleUserPhoto(photo));

     // ...When the Activity is being recreated...
    sub.unsubscribe();

    // ...Once the Activity is recreated...
    request.subscribe(photo -> handleUserPhoto(photo));

    注意，两次sub是使用的同一个缓存的请求。当然在哪里去存储请求的结果还是要你自己来做，和所有其他的生命周期相关的解决方案一延虎，必须在生命周期外的某个地方存储。（retained fragment或者单例等等）。

    第二个问题的解决方案就是在生命周期的某个时刻取消订阅。一个很常见的模式就是使用CompositeSubscription来持有所有的Subscriptions，然后在onDestroy()或者onDestroyView()里取消所有的订阅。

    private CompositeSubscription mCompositeSubscription
            = new CompositeSubscription();

    private void doSomething() {
        mCompositeSubscription.add(
                AndroidObservable.bindActivity(this, Observable.just("Hello, World!"))
                        .subscribe(s -> System.out.println(s)));
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();

        mCompositeSubscription.unsubscribe();
    }

    你可以在Activity/Fragment的基类里创建一个CompositeSubscription对象，在子类中使用它。

    注意! 一旦你调用了 CompositeSubscription.unsubscribe()，这个CompositeSubscription对象就不可用了, 如果你还想使用CompositeSubscription，就必须在创建一个新的对象了。

    两个问题的解决方案都需要添加额外的代码，如果谁有更好的方案，欢迎告诉我。

    总结

    RxJava还是一个很新的项目，RxAndroid更是。RxAndroid目前还在活跃开发中，也没有多少好的例子。我打赌一年之后我的一些建议就会被看做过时了。*/